#!/usr/bin/python
import os
import sys
from datetime import date

#Class definitions
class Transaction:
    def __init__(self,transaction_type,date,amount):
        self.transaction_type = transaction_type
        self.date = date
        self.amount = amount
        return
class Account:
    def __init__(self,acct_numb,name):
        self.acct_numb = acct_numb
        self.name = name
        self.balance = 0
        self.transactions = []
        return
    def add_transaction(self,transaction):
        self.transactions.append(transaction) 
        if transaction.transaction_type == "W":
            self.balance = self.balance - transaction.amount
        else:
            self.balance = self.balance + transaction.amount
        return
    def __repr__(self):
        return repr((self.name,self.balance,self.acct_numb))
    def output_for_file(self):
        output = ''
        for transaction in self.transactions:
            output = output + self.acct_numb + ":" + self.name + ":" + transaction.date + ":" + transaction.transaction_type + ":" + str(transaction.amount) + "\n"
        return output

#Method definitions
def sort_account_by_name():
    sorted_acct_numbs = sorted(accounts, key= lambda acct_numb:accounts[acct_numb].name)
    return sorted_acct_numbs

def print_out_accounts():
    print 'History'
    print '-------'
    sorted_acct_numbs = sort_account_by_name()
    count = 0
    for numb in sorted_acct_numbs:
        count += 1
        print str(count) + ')' + accounts[numb].name + " " + accounts[numb].acct_numb
    print 'q)uit\n'
    return sorted_acct_numbs

def select_account():
    current_account = raw_input('Enter choice => ' ).strip()
    if current_account == 'q':
        exit(0)
    return int(current_account) - 1

def select_account_for_inset():
    current_account = raw_input('Enter choice  or n to create a new account => ' ).strip()
    if current_account == 'n':
        create_new_account()

        return int(len(accounts.keys())) - 1
    else:
        if current_account == 'q':
            exit(0)
    return int(current_account) - 1

def create_new_account():
    acct_numb = raw_input('Enter account numb:' ).strip()
    if acct_numb in accounts.keys():
        print "error account number already taken"
        exit(1)
    name = raw_input('Enter account name:').strip()
    accounts[acct_numb] = Account(acct_numb,name)
    sorted_acct_numbs.append(acct_numb)
    return

def format_date():
    t = date.today().timetuple()
    year = str(t[0])[2:]
    month = ''
    if len(str(t[1])) == 1:
        month = '0' + str(t[1])
    else:
         month = str(t[1])
    day = ''
    if len(str(t[2])) == 1:
        day = '0' + str(t[2])
    else:
        day = str(t[2])
    return year + "." + month + "." + day
    
def insert_transaction():
    transaction_type = raw_input("Enter transaction type, w for widthdrawl, d for deposit: ").strip()
    if transaction_type != 'w' and transaction_type != 'W' and transaction_type != 'D' and transaction_type != 'd':
       print "error invalid transaction_type" 
       exit(1)
    amount = float(raw_input("Enter the transaction amount: "))
    accounts[sorted_acct_numbs[current_account]].add_transaction(Transaction(transaction_type.capitalize(),format_date(),amount))
    
def list_account_details():
    print '\n\t account #: ' + accounts[sorted_acct_numbs[current_account]].acct_numb
    print '\t name: ' + accounts[sorted_acct_numbs[current_account]].name
    print '\t balance: ' + str(accounts[sorted_acct_numbs[current_account]].balance) + '\n'
    raw_input("Press enter to go back to the account listings..")
    return

def list_account_history():
    print '\n'
    for transaction in accounts[sorted_acct_numbs[current_account]].transactions:
        if transaction.transaction_type == "W":
            print transaction.date  +  " widthdrawl $" + str(transaction.amount)
        else:
            print transaction.date  +  " deposit $" + str(transaction.amount)
    print '\n'
    return

def print_usage():
    print "-i see detailed information about a choosen account"
    print "-h see a choosen accounts transaction history"
    print "-t add a new transaction and or add a new account"
    print "-? show this message"

def save_to_file():
    data = ''
    for account in accounts:
        data = data + accounts[account].output_for_file()
    with open('tmp','w') as f:
        f.write(data)
    os.rename('tmp',path)
    return

#Globals
accounts = {}
sorted_acct_numbs = []
current_account = None
insert_new_account = False
path = os.environ.get('ACCT_LIST')


if path == None:
    path = "sample.db"

with open(path,'r') as f:
    for line in f:
        formmated_line = line.strip();
        line_info = formmated_line.split(':')
        transaction = Transaction(line_info[3],line_info[2],float(line_info[4]))
        if line_info[0] not in accounts.keys():
            accounts[line_info[0]] = Account(line_info[0],line_info[1])
        accounts[line_info[0]].add_transaction(transaction);

if(len(sys.argv) > 1):
    if sys.argv[1].strip() == "-?":
        print_usage();
        exit(0)
    while True:
        if sys.argv[1].strip() == "-i":
            sorted_acct_numbs = print_out_accounts()
            current_account = select_account()
            list_account_details()
        if sys.argv[1].strip() == "-h":
            sorted_acct_numbs = print_out_accounts()
            current_account = select_account()
            list_account_history()
        if sys.argv[1].strip() == "-t":
            sorted_acct_numbs = print_out_accounts()
            current_account = select_account_for_inset()
            insert_transaction()
        save_to_file()
else:
    print_usage()
    
